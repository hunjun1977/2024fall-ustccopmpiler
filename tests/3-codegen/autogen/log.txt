==========./testcases/0-io.cminus==========
i32
calldone
% = call i32 @input()
i32
calldone
returnstmt
i32
calldone
% = call i32 @input()
i32
calldone
returnstmt
1234								1234
0								0
==========./testcases/1-return.cminus==========
i32
111
i32
calldone
returnstmt
i32
111
i32
calldone
returnstmt
111								111
111								111
==========./testcases/2-calculate.cminus==========
returnstmt
% = load i32, i32* %
% = mul i32 %, %
i32
returnstmt
% = load i32, i32* %
% = mul i32 %, %
i32
123								123
==========./testcases/3-output.cminus==========
i32
11
i32
calldone
i32
22222
i32
calldone
returnstmt
i32
11
i32
calldone
i32
22222
i32
calldone
returnstmt
11								11
22222								22222
0								0
==========./testcases/4-if.cminus==========
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
returnstmt
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
returnstmt
33								33
0								0
==========./testcases/5-while.cminus==========
i32
% = load i32, i32* %
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
i32
% = load i32, i32* %
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
0								0
1								1
2								2
3								3
4								4
5								5
6								6
7								7
8								8
9								9
0								0
==========./testcases/6-array.cminus==========
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
returnstmt
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
i32
% = load i32, i32* %
i32
calldone
returnstmt
11								11
22								22
33								33
0								0
==========./testcases/7-function.cminus==========
i32*
i32*
% = alloca i32
i32 %
i32
a
store i32 %, i32* %
% = alloca i32
i32 %
i32
b
store i32 %, i32* %
returnstmt
returnstmt
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
returnstmt
i32*
i32*
% = alloca i32
i32 %
i32
a
store i32 %, i32* %
% = alloca i32
i32 %
i32
b
store i32 %, i32* %
returnstmt
returnstmt
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
i32
i32
% = load i32, i32* %
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @min(i32 %, i32 %)
i32
calldone
returnstmt
11								11
22								22
11								11
0								0
==========./testcases/8-store.cminus==========
i32*
i32*
% = alloca i32
i32 %
i32
index
store i32 %, i32* %
% = alloca i32
i32 %
i32
value
store i32 %, i32* %
returnstmt
i32*
% = alloca [10 x i32]
[10 x i32]*
[10 x i32]*
i32
% = load i32, i32* %
i32
i32
% = mul i32 %, 2
i32
calldone
% = load i32, i32* %
1
i32
% = load i32, i32* %
% = load i32, i32* %
i32
% = load i32, i32* %
1
i32
i32
% = load i32, i32* %
i32
calldone
returnstmt
i32*
i32*
% = alloca i32
i32 %
i32
index
store i32 %, i32* %
% = alloca i32
i32 %
i32
value
store i32 %, i32* %
returnstmt
i32*
% = alloca [10 x i32]
[10 x i32]*
[10 x i32]*
i32
% = load i32, i32* %
i32
i32
% = mul i32 %, 2
i32
calldone
% = load i32, i32* %
1
i32
% = load i32, i32* %
% = load i32, i32* %
i32
% = load i32, i32* %
1
i32
i32
% = load i32, i32* %
i32
calldone
returnstmt
90								90
0								0
==========./testcases/9-assign_cast.cminus==========
returnstmt
% = load i32, i32* %
% = load i32, i32* %
i32
returnstmt
% = load i32, i32* %
% = load i32, i32* %
i32
==========./testcases/9-fibonacci.cminus==========
i32*
% = alloca i32
i32 %
i32
n
store i32 %, i32* %
returnstmt
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
calldone
i32
% = load i32, i32* %
2
i32
% = sub i32 %, 2
i32
calldone
% = call i32 @fibonacci(i32 %)
% = call i32 @fibonacci(i32 %)
i32
returnstmt
returnstmt
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @fibonacci(i32 %)
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
i32*
% = alloca i32
i32 %
i32
n
store i32 %, i32* %
returnstmt
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
calldone
i32
% = load i32, i32* %
2
i32
% = sub i32 %, 2
i32
calldone
% = call i32 @fibonacci(i32 %)
% = call i32 @fibonacci(i32 %)
i32
returnstmt
returnstmt
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @fibonacci(i32 %)
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
0								0
1								1
1								1
2								2
3								3
5								5
8								8
13								13
21								21
34								34
0								0
==========./testcases/10-float.cminus==========
float
% = fadd float %, %
float
calldone
returnstmt
float
% = fadd float %, %
float
calldone
returnstmt
2.850000							2.850000
0								0
==========./testcases/11-floatcall.cminus==========
float*
float*
% = alloca float
float %
float
x
store float %, float* %
% = alloca float
float %
float
y
store float %, float* %
returnstmt
float
float
% = load float, float* %
float
float
% = load float, float* %
float
calldone
% = call float @mod(float %, float %)
float
calldone
returnstmt
float*
float*
% = alloca float
float %
float
x
store float %, float* %
% = alloca float
float %
float
y
store float %, float* %
returnstmt
float
float
% = load float, float* %
float
float
% = load float, float* %
float
calldone
% = call float @mod(float %, float %)
float
calldone
returnstmt
0.200000							0.200000
0								0
==========./testcases/12-global.cminus==========
% = mul i32 %, 1103515245
12345
i32
returnstmt
calldone
returnstmt
returnstmt
calldone
% = load i32, i32* %
1
i32
% = load i32, i32* %
1
i32
% = load i32, i32* %
1
i32
returnstmt
returnstmt
i32
calldone
% = call i32 @returnToZeroSteps()
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
% = mul i32 %, 1103515245
12345
i32
returnstmt
calldone
returnstmt
returnstmt
calldone
% = load i32, i32* %
1
i32
% = load i32, i32* %
1
i32
% = load i32, i32* %
1
i32
returnstmt
returnstmt
i32
calldone
% = call i32 @returnToZeroSteps()
i32
calldone
% = load i32, i32* %
1
i32
returnstmt
4								4
2								2
2								2
4								4
8								8
2								2
2								2
2								2
2								2
2								2
6								6
2								2
10								10
8								8
4								4
2								2
20								20
2								2
2								2
8								8
0								0
==========./testcases/13-complex.cminus==========
i32*
i32*
% = alloca i32
i32 %
i32
a
store i32 %, i32* %
% = alloca i32
i32 %
i32
b
store i32 %, i32* %
returnstmt
returnstmt
i32*
i32*
% = alloca i32
i32 %
i32
n
store i32 %, i32* %
% = alloca i32
i32 %
i32
size
store i32 %, i32* %
returnstmt
returnstmt
% = mul i32 %, 11
% = load i32, i32* %
i32
returnstmt
% = mul i32 %, 11
% = load i32, i32* %
i32
% = load i32, i32* %
1
i32
i32
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @knapsack(i32 %, i32 %)
i32
i32
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
1
i32
% = load i32, i32* %
% = load i32, i32* %
i32
% = sub i32 %, %
i32
calldone
% = load i32, i32* %
1
i32
% = call i32 @knapsack(i32 %, i32 %)
% = load i32, i32* %
i32
% = add i32 %, %
i32
calldone
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
i32
calldone
% = mul i32 %, 11
% = load i32, i32* %
i32
returnstmt
0
1
i32
% = load i32, i32* %
1
i32
i32
i32
% = load i32, i32* @n
i32
i32
% = load i32, i32* @m
i32
calldone
% = call i32 @knapsack(i32 %, i32 %)
i32
calldone
returnstmt
i32*
i32*
% = alloca i32
i32 %
i32
a
store i32 %, i32* %
% = alloca i32
i32 %
i32
b
store i32 %, i32* %
returnstmt
returnstmt
i32*
i32*
% = alloca i32
i32 %
i32
n
store i32 %, i32* %
% = alloca i32
i32 %
i32
size
store i32 %, i32* %
returnstmt
returnstmt
% = mul i32 %, 11
% = load i32, i32* %
i32
returnstmt
% = mul i32 %, 11
% = load i32, i32* %
i32
% = load i32, i32* %
1
i32
i32
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
i32
calldone
% = call i32 @knapsack(i32 %, i32 %)
i32
i32
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
1
i32
% = load i32, i32* %
% = load i32, i32* %
i32
% = sub i32 %, %
i32
calldone
% = load i32, i32* %
1
i32
% = call i32 @knapsack(i32 %, i32 %)
% = load i32, i32* %
i32
% = add i32 %, %
i32
calldone
i32
% = load i32, i32* %
1
i32
% = sub i32 %, 1
i32
i32
% = load i32, i32* %
i32
calldone
% = mul i32 %, 11
% = load i32, i32* %
i32
returnstmt
0
1
i32
% = load i32, i32* %
1
i32
i32
i32
% = load i32, i32* @n
i32
i32
% = load i32, i32* @m
i32
calldone
% = call i32 @knapsack(i32 %, i32 %)
i32
calldone
returnstmt
15								15
0								0
